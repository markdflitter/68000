#ifndef SHAREDPTR
#define SHAREDPTR
//#include <stdio.h>


namespace mdf
{

template <class T>
class shared_ptr
{
public:
	template<typename U>
	    friend class shared_ptr;

	explicit shared_ptr ()
		: m_t (0)
	{
			m_count = new int (1);	
	}

	explicit shared_ptr (T* t)
		: m_t (t)
	{
			m_count = new int (1);	
	}

	~shared_ptr ()
	{
		decrement_count ();
	}

	shared_ptr (const shared_ptr& other)
			: m_t (other.m_t), m_count (other.m_count)
		{	
			increment_count ();
		}

	template <class U> shared_ptr (const shared_ptr<U>& other)
			: m_t (other.m_t), m_count (other.m_count)
		{	
			increment_count ();
		}

	shared_ptr& operator= (const shared_ptr& other)
	{
		if (&other != this)
		{
			decrement_count ();
			m_t = other.m_t;
			m_count = other.m_count;
			increment_count ();
		}

		return *this;
	}

	template <class U> shared_ptr& operator= (const shared_ptr<U>& other)
		{
			if (&other != this)
			{
				decrement_count ();
				m_t = other.m_t;
				m_count = other.m_count;
				increment_count ();
			}
		}

	bool isNull () const { return m_t == 0; }
	void reset () { decrement_count (); m_count = 0; m_t = 0; }

	T* operator-> () { return m_t; }
	const T* operator-> () const { return m_t; }

	T& operator* () { return *m_t; }
	const T& operator* () const { return *m_t; }

	T* get_raw () { return m_t; }
	const T* get_raw () const { return m_t; }

	int count () const
	{
		return m_count ? *m_count : -1;
	}
private:
	void increment_count ()
	{
		if (!m_count) return ;
		(*m_count)++;
	}

	void decrement_count ()
	{
		if (!m_count || (*m_count == 0)) return ;
		(*m_count)--;
		if (*m_count == 0)
		{
			delete m_count;
			m_count = 0;
		
			delete m_t;
			m_t = 0;
		}
	}

	T* m_t;
	int* m_count;
};

template <class T>
shared_ptr <T> make_shared (T* t) {return shared_ptr<T> (t);}

}

#endif
